{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport * as ponyfill from '@material/dom/ponyfill';\nimport { MDCFloatingLabel } from '@material/floating-label/component';\nimport { MDCLineRipple } from '@material/line-ripple/component';\nimport { MDCNotchedOutline } from '@material/notched-outline/component';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { MDCTextFieldCharacterCounter } from './character-counter/component';\nimport { MDCTextFieldCharacterCounterFoundation } from './character-counter/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCTextFieldFoundation } from './foundation';\nimport { MDCTextFieldHelperText } from './helper-text/component';\nimport { MDCTextFieldHelperTextFoundation } from './helper-text/foundation';\nimport { MDCTextFieldIcon } from './icon/component';\n\nvar MDCTextField =\n/** @class */\nfunction (_super) {\n  __extends(MDCTextField, _super);\n\n  function MDCTextField() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCTextField.attachTo = function (root) {\n    return new MDCTextField(root);\n  };\n\n  MDCTextField.prototype.initialize = function (rippleFactory, lineRippleFactory, helperTextFactory, characterCounterFactory, iconFactory, labelFactory, outlineFactory) {\n    if (rippleFactory === void 0) {\n      rippleFactory = function (el, foundation) {\n        return new MDCRipple(el, foundation);\n      };\n    }\n\n    if (lineRippleFactory === void 0) {\n      lineRippleFactory = function (el) {\n        return new MDCLineRipple(el);\n      };\n    }\n\n    if (helperTextFactory === void 0) {\n      helperTextFactory = function (el) {\n        return new MDCTextFieldHelperText(el);\n      };\n    }\n\n    if (characterCounterFactory === void 0) {\n      characterCounterFactory = function (el) {\n        return new MDCTextFieldCharacterCounter(el);\n      };\n    }\n\n    if (iconFactory === void 0) {\n      iconFactory = function (el) {\n        return new MDCTextFieldIcon(el);\n      };\n    }\n\n    if (labelFactory === void 0) {\n      labelFactory = function (el) {\n        return new MDCFloatingLabel(el);\n      };\n    }\n\n    if (outlineFactory === void 0) {\n      outlineFactory = function (el) {\n        return new MDCNotchedOutline(el);\n      };\n    }\n\n    this.input = this.root.querySelector(strings.INPUT_SELECTOR);\n    var labelElement = this.root.querySelector(strings.LABEL_SELECTOR);\n    this.label = labelElement ? labelFactory(labelElement) : null;\n    var lineRippleElement = this.root.querySelector(strings.LINE_RIPPLE_SELECTOR);\n    this.lineRipple = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;\n    var outlineElement = this.root.querySelector(strings.OUTLINE_SELECTOR);\n    this.outline = outlineElement ? outlineFactory(outlineElement) : null; // Helper text\n\n    var helperTextStrings = MDCTextFieldHelperTextFoundation.strings;\n    var nextElementSibling = this.root.nextElementSibling;\n    var hasHelperLine = nextElementSibling && nextElementSibling.classList.contains(cssClasses.HELPER_LINE);\n    var helperTextEl = hasHelperLine && nextElementSibling && nextElementSibling.querySelector(helperTextStrings.ROOT_SELECTOR);\n    this.helperText = helperTextEl ? helperTextFactory(helperTextEl) : null; // Character counter\n\n    var characterCounterStrings = MDCTextFieldCharacterCounterFoundation.strings;\n    var characterCounterEl = this.root.querySelector(characterCounterStrings.ROOT_SELECTOR); // If character counter is not found in root element search in sibling element.\n\n    if (!characterCounterEl && hasHelperLine && nextElementSibling) {\n      characterCounterEl = nextElementSibling.querySelector(characterCounterStrings.ROOT_SELECTOR);\n    }\n\n    this.characterCounter = characterCounterEl ? characterCounterFactory(characterCounterEl) : null; // Leading icon\n\n    var leadingIconEl = this.root.querySelector(strings.LEADING_ICON_SELECTOR);\n    this.leadingIcon = leadingIconEl ? iconFactory(leadingIconEl) : null; // Trailing icon\n\n    var trailingIconEl = this.root.querySelector(strings.TRAILING_ICON_SELECTOR);\n    this.trailingIcon = trailingIconEl ? iconFactory(trailingIconEl) : null; // Prefix and Suffix\n\n    this.prefix = this.root.querySelector(strings.PREFIX_SELECTOR);\n    this.suffix = this.root.querySelector(strings.SUFFIX_SELECTOR);\n    this.ripple = this.createRipple(rippleFactory);\n  };\n\n  MDCTextField.prototype.destroy = function () {\n    if (this.ripple) {\n      this.ripple.destroy();\n    }\n\n    if (this.lineRipple) {\n      this.lineRipple.destroy();\n    }\n\n    if (this.helperText) {\n      this.helperText.destroy();\n    }\n\n    if (this.characterCounter) {\n      this.characterCounter.destroy();\n    }\n\n    if (this.leadingIcon) {\n      this.leadingIcon.destroy();\n    }\n\n    if (this.trailingIcon) {\n      this.trailingIcon.destroy();\n    }\n\n    if (this.label) {\n      this.label.destroy();\n    }\n\n    if (this.outline) {\n      this.outline.destroy();\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Initializes the Text Field's internal state based on the environment's\n   * state.\n   */\n\n\n  MDCTextField.prototype.initialSyncWithDOM = function () {\n    this.disabled = this.input.disabled;\n  };\n\n  Object.defineProperty(MDCTextField.prototype, \"value\", {\n    get: function () {\n      return this.foundation.getValue();\n    },\n\n    /**\n     * @param value The value to set on the input.\n     */\n    set: function (value) {\n      this.foundation.setValue(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"disabled\", {\n    get: function () {\n      return this.foundation.isDisabled();\n    },\n\n    /**\n     * @param disabled Sets the Text Field disabled or enabled.\n     */\n    set: function (disabled) {\n      this.foundation.setDisabled(disabled);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"valid\", {\n    get: function () {\n      return this.foundation.isValid();\n    },\n\n    /**\n     * @param valid Sets the Text Field valid or invalid.\n     */\n    set: function (valid) {\n      this.foundation.setValid(valid);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"required\", {\n    get: function () {\n      return this.input.required;\n    },\n\n    /**\n     * @param required Sets the Text Field to required.\n     */\n    set: function (required) {\n      this.input.required = required;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"pattern\", {\n    get: function () {\n      return this.input.pattern;\n    },\n\n    /**\n     * @param pattern Sets the input element's validation pattern.\n     */\n    set: function (pattern) {\n      this.input.pattern = pattern;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"minLength\", {\n    get: function () {\n      return this.input.minLength;\n    },\n\n    /**\n     * @param minLength Sets the input element's minLength.\n     */\n    set: function (minLength) {\n      this.input.minLength = minLength;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"maxLength\", {\n    get: function () {\n      return this.input.maxLength;\n    },\n\n    /**\n     * @param maxLength Sets the input element's maxLength.\n     */\n    set: function (maxLength) {\n      // Chrome throws exception if maxLength is set to a value less than zero\n      if (maxLength < 0) {\n        this.input.removeAttribute('maxLength');\n      } else {\n        this.input.maxLength = maxLength;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"min\", {\n    get: function () {\n      return this.input.min;\n    },\n\n    /**\n     * @param min Sets the input element's min.\n     */\n    set: function (min) {\n      this.input.min = min;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"max\", {\n    get: function () {\n      return this.input.max;\n    },\n\n    /**\n     * @param max Sets the input element's max.\n     */\n    set: function (max) {\n      this.input.max = max;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"step\", {\n    get: function () {\n      return this.input.step;\n    },\n\n    /**\n     * @param step Sets the input element's step.\n     */\n    set: function (step) {\n      this.input.step = step;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"helperTextContent\", {\n    /**\n     * Sets the helper text element content.\n     */\n    set: function (content) {\n      this.foundation.setHelperTextContent(content);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"leadingIconAriaLabel\", {\n    /**\n     * Sets the aria label of the leading icon.\n     */\n    set: function (label) {\n      this.foundation.setLeadingIconAriaLabel(label);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"leadingIconContent\", {\n    /**\n     * Sets the text content of the leading icon.\n     */\n    set: function (content) {\n      this.foundation.setLeadingIconContent(content);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"trailingIconAriaLabel\", {\n    /**\n     * Sets the aria label of the trailing icon.\n     */\n    set: function (label) {\n      this.foundation.setTrailingIconAriaLabel(label);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"trailingIconContent\", {\n    /**\n     * Sets the text content of the trailing icon.\n     */\n    set: function (content) {\n      this.foundation.setTrailingIconContent(content);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"useNativeValidation\", {\n    /**\n     * Enables or disables the use of native validation. Use this for custom validation.\n     * @param useNativeValidation Set this to false to ignore native input validation.\n     */\n    set: function (useNativeValidation) {\n      this.foundation.setUseNativeValidation(useNativeValidation);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"prefixText\", {\n    /**\n     * Gets the text content of the prefix, or null if it does not exist.\n     */\n    get: function () {\n      return this.prefix ? this.prefix.textContent : null;\n    },\n\n    /**\n     * Sets the text content of the prefix, if it exists.\n     */\n    set: function (prefixText) {\n      if (this.prefix) {\n        this.prefix.textContent = prefixText;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"suffixText\", {\n    /**\n     * Gets the text content of the suffix, or null if it does not exist.\n     */\n    get: function () {\n      return this.suffix ? this.suffix.textContent : null;\n    },\n\n    /**\n     * Sets the text content of the suffix, if it exists.\n     */\n    set: function (suffixText) {\n      if (this.suffix) {\n        this.suffix.textContent = suffixText;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Focuses the input element.\n   */\n\n  MDCTextField.prototype.focus = function () {\n    this.input.focus();\n  };\n  /**\n   * Recomputes the outline SVG path for the outline element.\n   */\n\n\n  MDCTextField.prototype.layout = function () {\n    var openNotch = this.foundation.shouldFloat;\n    this.foundation.notchOutline(openNotch);\n  };\n\n  MDCTextField.prototype.getDefaultFoundation = function () {\n    // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n    var adapter = __assign(__assign(__assign(__assign(__assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods()); // tslint:enable:object-literal-sort-keys\n\n\n    return new MDCTextFieldFoundation(adapter, this.getFoundationMap());\n  };\n\n  MDCTextField.prototype.getRootAdapterMethods = function () {\n    var _this = this; // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    return {\n      addClass: function (className) {\n        return _this.root.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root.classList.remove(className);\n      },\n      hasClass: function (className) {\n        return _this.root.classList.contains(className);\n      },\n      registerTextFieldInteractionHandler: function (evtType, handler) {\n        _this.listen(evtType, handler);\n      },\n      deregisterTextFieldInteractionHandler: function (evtType, handler) {\n        _this.unlisten(evtType, handler);\n      },\n      registerValidationAttributeChangeHandler: function (handler) {\n        var getAttributesList = function (mutationsList) {\n          return mutationsList.map(function (mutation) {\n            return mutation.attributeName;\n          }).filter(function (attributeName) {\n            return attributeName;\n          });\n        };\n\n        var observer = new MutationObserver(function (mutationsList) {\n          return handler(getAttributesList(mutationsList));\n        });\n        var config = {\n          attributes: true\n        };\n        observer.observe(_this.input, config);\n        return observer;\n      },\n      deregisterValidationAttributeChangeHandler: function (observer) {\n        observer.disconnect();\n      }\n    }; // tslint:enable:object-literal-sort-keys\n  };\n\n  MDCTextField.prototype.getInputAdapterMethods = function () {\n    var _this = this; // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    return {\n      getNativeInput: function () {\n        return _this.input;\n      },\n      setInputAttr: function (attr, value) {\n        _this.input.setAttribute(attr, value);\n      },\n      removeInputAttr: function (attr) {\n        _this.input.removeAttribute(attr);\n      },\n      isFocused: function () {\n        return document.activeElement === _this.input;\n      },\n      registerInputInteractionHandler: function (evtType, handler) {\n        _this.input.addEventListener(evtType, handler, applyPassive());\n      },\n      deregisterInputInteractionHandler: function (evtType, handler) {\n        _this.input.removeEventListener(evtType, handler, applyPassive());\n      }\n    }; // tslint:enable:object-literal-sort-keys\n  };\n\n  MDCTextField.prototype.getLabelAdapterMethods = function () {\n    var _this = this;\n\n    return {\n      floatLabel: function (shouldFloat) {\n        _this.label && _this.label.float(shouldFloat);\n      },\n      getLabelWidth: function () {\n        return _this.label ? _this.label.getWidth() : 0;\n      },\n      hasLabel: function () {\n        return Boolean(_this.label);\n      },\n      shakeLabel: function (shouldShake) {\n        _this.label && _this.label.shake(shouldShake);\n      },\n      setLabelRequired: function (isRequired) {\n        _this.label && _this.label.setRequired(isRequired);\n      }\n    };\n  };\n\n  MDCTextField.prototype.getLineRippleAdapterMethods = function () {\n    var _this = this;\n\n    return {\n      activateLineRipple: function () {\n        if (_this.lineRipple) {\n          _this.lineRipple.activate();\n        }\n      },\n      deactivateLineRipple: function () {\n        if (_this.lineRipple) {\n          _this.lineRipple.deactivate();\n        }\n      },\n      setLineRippleTransformOrigin: function (normalizedX) {\n        if (_this.lineRipple) {\n          _this.lineRipple.setRippleCenter(normalizedX);\n        }\n      }\n    };\n  };\n\n  MDCTextField.prototype.getOutlineAdapterMethods = function () {\n    var _this = this;\n\n    return {\n      closeOutline: function () {\n        _this.outline && _this.outline.closeNotch();\n      },\n      hasOutline: function () {\n        return Boolean(_this.outline);\n      },\n      notchOutline: function (labelWidth) {\n        _this.outline && _this.outline.notch(labelWidth);\n      }\n    };\n  };\n  /**\n   * @return A map of all subcomponents to subfoundations.\n   */\n\n\n  MDCTextField.prototype.getFoundationMap = function () {\n    return {\n      characterCounter: this.characterCounter ? this.characterCounter.foundationForTextField : undefined,\n      helperText: this.helperText ? this.helperText.foundationForTextField : undefined,\n      leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForTextField : undefined,\n      trailingIcon: this.trailingIcon ? this.trailingIcon.foundationForTextField : undefined\n    };\n  };\n\n  MDCTextField.prototype.createRipple = function (rippleFactory) {\n    var _this = this;\n\n    var isTextArea = this.root.classList.contains(cssClasses.TEXTAREA);\n    var isOutlined = this.root.classList.contains(cssClasses.OUTLINED);\n\n    if (isTextArea || isOutlined) {\n      return null;\n    } // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), {\n      isSurfaceActive: function () {\n        return ponyfill.matches(_this.input, ':active');\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        _this.input.addEventListener(evtType, handler, applyPassive());\n      },\n      deregisterInteractionHandler: function (evtType, handler) {\n        _this.input.removeEventListener(evtType, handler, applyPassive());\n      }\n    }); // tslint:enable:object-literal-sort-keys\n\n\n    return rippleFactory(this.root, new MDCRippleFoundation(adapter));\n  };\n\n  return MDCTextField;\n}(MDCComponent);\n\nexport { MDCTextField };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AAEH,SAAQ,YAAR,QAA2B,0BAA3B;AACA,SAAQ,YAAR,QAA2B,sBAA3B;AACA,OAAO,KAAK,QAAZ,MAA0B,wBAA1B;AACA,SAAQ,gBAAR,QAAwD,oCAAxD;AACA,SAAQ,aAAR,QAAkD,iCAAlD;AACA,SAAQ,iBAAR,QAA0D,qCAA1D;AAEA,SAAQ,SAAR,QAA0C,4BAA1C;AACA,SAAQ,mBAAR,QAAkC,6BAAlC;AAIA,SAAQ,4BAAR,QAAgF,+BAAhF;AACA,SAAQ,sCAAR,QAAqD,gCAArD;AACA,SAAQ,UAAR,EAAoB,OAApB,QAAkC,aAAlC;AACA,SAAQ,sBAAR,QAAqC,cAArC;AACA,SAAQ,sBAAR,QAAoE,yBAApE;AACA,SAAQ,gCAAR,QAA+C,0BAA/C;AACA,SAAQ,gBAAR,QAAwD,kBAAxD;;AAGA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAAlC,WAAA,YAAA,GAAA;;AAgeC;;AA/diB,EAAA,YAAA,CAAA,QAAA,GAAhB,UAAyB,IAAzB,EAAsC;AACpC,WAAO,IAAI,YAAJ,CAAiB,IAAjB,CAAP;AACD,GAFe;;AAqBP,EAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAT,UACI,aADJ,EAGI,iBAHJ,EAII,iBAJJ,EAMI,uBANJ,EAQI,WARJ,EASI,YATJ,EAUI,cAVJ,EAWoE;AAVhE,QAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,aAAA,GAAA,UACwB,EADxB,EAC4B,UAD5B,EACsC;AAAK,eAAA,IAAI,SAAJ,CAAc,EAAd,EAAA,UAAA,CAAA;AAA6B,OADxE;AACwE;;AACxE,QAAA,iBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,iBAAA,GAAA,UAA2C,EAA3C,EAA6C;AAAK,eAAA,IAAI,aAAJ,CAAA,EAAA,CAAA;AAAqB,OAAvE;AAAuE;;AACvE,QAAA,iBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,iBAAA,GAAA,UAAoD,EAApD,EAAsD;AAClD,eAAA,IAAI,sBAAJ,CAA2B,EAA3B,CAAA;AAA8B,OADlC;AACkC;;AAClC,QAAA,uBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,uBAAA,GAAA,UAAgE,EAAhE,EAAkE;AAC9D,eAAA,IAAI,4BAAJ,CAAiC,EAAjC,CAAA;AAAoC,OADxC;AACwC;;AACxC,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,UAAwC,EAAxC,EAA0C;AAAK,eAAA,IAAI,gBAAJ,CAAA,EAAA,CAAA;AAAwB,OAAvE;AAAuE;;AACvE,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,UAAyC,EAAzC,EAA2C;AAAK,eAAA,IAAI,gBAAJ,CAAA,EAAA,CAAA;AAAwB,OAAxE;AAAwE;;AACxE,QAAA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,cAAA,GAAA,UACgC,EADhC,EACkC;AAAK,eAAA,IAAI,iBAAJ,CAAA,EAAA,CAAA;AAAyB,OADhE;AACgE;;AAElE,SAAK,KAAL,GACI,KAAK,IAAL,CAAU,aAAV,CAA0C,OAAO,CAAC,cAAlD,CADJ;AAGA,QAAM,YAAY,GAAG,KAAK,IAAL,CAAU,aAAV,CAAwB,OAAO,CAAC,cAAhC,CAArB;AACA,SAAK,KAAL,GAAa,YAAY,GAAG,YAAY,CAAC,YAAD,CAAf,GAAgC,IAAzD;AAEA,QAAM,iBAAiB,GAAG,KAAK,IAAL,CAAU,aAAV,CAAwB,OAAO,CAAC,oBAAhC,CAA1B;AACA,SAAK,UAAL,GACI,iBAAiB,GAAG,iBAAiB,CAAC,iBAAD,CAApB,GAA0C,IAD/D;AAGA,QAAM,cAAc,GAAG,KAAK,IAAL,CAAU,aAAV,CAAwB,OAAO,CAAC,gBAAhC,CAAvB;AACA,SAAK,OAAL,GAAe,cAAc,GAAG,cAAc,CAAC,cAAD,CAAjB,GAAoC,IAAjE,CAbkE,CAelE;;AACA,QAAM,iBAAiB,GAAG,gCAAgC,CAAC,OAA3D;AACA,QAAM,kBAAkB,GAAG,KAAK,IAAL,CAAU,kBAArC;AACA,QAAM,aAAa,GAAI,kBAAkB,IAAI,kBAAkB,CAAC,SAAnB,CAA6B,QAA7B,CAAsC,UAAU,CAAC,WAAjD,CAA7C;AACA,QAAM,YAAY,GACd,aAAa,IAAI,kBAAjB,IAAuC,kBAAkB,CAAC,aAAnB,CAAiC,iBAAiB,CAAC,aAAnD,CAD3C;AAEA,SAAK,UAAL,GAAkB,YAAY,GAAG,iBAAiB,CAAC,YAAD,CAApB,GAAqC,IAAnE,CArBkE,CAuBlE;;AACA,QAAM,uBAAuB,GAAG,sCAAsC,CAAC,OAAvE;AACA,QAAI,kBAAkB,GAAG,KAAK,IAAL,CAAU,aAAV,CAAwB,uBAAuB,CAAC,aAAhD,CAAzB,CAzBkE,CA0BlE;;AACA,QAAI,CAAC,kBAAD,IAAuB,aAAvB,IAAwC,kBAA5C,EAAgE;AAC9D,MAAA,kBAAkB,GAAG,kBAAkB,CAAC,aAAnB,CAAiC,uBAAuB,CAAC,aAAzD,CAArB;AACD;;AACD,SAAK,gBAAL,GACI,kBAAkB,GAAG,uBAAuB,CAAC,kBAAD,CAA1B,GAAiD,IADvE,CA9BkE,CAiClE;;AACA,QAAM,aAAa,GACf,KAAK,IAAL,CAAU,aAAV,CAAwB,OAAO,CAAC,qBAAhC,CADJ;AAEA,SAAK,WAAL,GAAmB,aAAa,GAAG,WAAW,CAAC,aAAD,CAAd,GAAgC,IAAhE,CApCkE,CAsClE;;AACA,QAAM,cAAc,GAChB,KAAK,IAAL,CAAU,aAAV,CAAwB,OAAO,CAAC,sBAAhC,CADJ;AAEA,SAAK,YAAL,GAAoB,cAAc,GAAG,WAAW,CAAC,cAAD,CAAd,GAAiC,IAAnE,CAzCkE,CA2ClE;;AACA,SAAK,MAAL,GAAc,KAAK,IAAL,CAAU,aAAV,CAAwB,OAAO,CAAC,eAAhC,CAAd;AACA,SAAK,MAAL,GAAc,KAAK,IAAL,CAAU,aAAV,CAAwB,OAAO,CAAC,eAAhC,CAAd;AAEA,SAAK,MAAL,GAAc,KAAK,YAAL,CAAkB,aAAlB,CAAd;AACD,GA3DQ;;AA6DA,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAT,YAAA;AACE,QAAI,KAAK,MAAT,EAAiB;AACf,WAAK,MAAL,CAAY,OAAZ;AACD;;AACD,QAAI,KAAK,UAAT,EAAqB;AACnB,WAAK,UAAL,CAAgB,OAAhB;AACD;;AACD,QAAI,KAAK,UAAT,EAAqB;AACnB,WAAK,UAAL,CAAgB,OAAhB;AACD;;AACD,QAAI,KAAK,gBAAT,EAA2B;AACzB,WAAK,gBAAL,CAAsB,OAAtB;AACD;;AACD,QAAI,KAAK,WAAT,EAAsB;AACpB,WAAK,WAAL,CAAiB,OAAjB;AACD;;AACD,QAAI,KAAK,YAAT,EAAuB;AACrB,WAAK,YAAL,CAAkB,OAAlB;AACD;;AACD,QAAI,KAAK,KAAT,EAAgB;AACd,WAAK,KAAL,CAAW,OAAX;AACD;;AACD,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,OAAL,CAAa,OAAb;AACD;;AACD,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;AACD,GA1BQ;AA4BT;;;AAGG;;;AACM,EAAA,YAAA,CAAA,SAAA,CAAA,kBAAA,GAAT,YAAA;AACE,SAAK,QAAL,GAAgB,KAAK,KAAL,CAAW,QAA3B;AACD,GAFQ;;AAIT,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;SAAT,YAAA;AACE,aAAO,KAAK,UAAL,CAAgB,QAAhB,EAAP;AACD,KAFQ;;AAIT;;AAEG;SACH,UAAU,KAAV,EAAuB;AACrB,WAAK,UAAL,CAAgB,QAAhB,CAAyB,KAAzB;AACD,KATQ;qBAAA;;AAAA,GAAT;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;SAAZ,YAAA;AACE,aAAO,KAAK,UAAL,CAAgB,UAAhB,EAAP;AACD,KAFW;;AAIZ;;AAEG;SACH,UAAa,QAAb,EAA8B;AAC5B,WAAK,UAAL,CAAgB,WAAhB,CAA4B,QAA5B;AACD,KATW;qBAAA;;AAAA,GAAZ;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;SAAT,YAAA;AACE,aAAO,KAAK,UAAL,CAAgB,OAAhB,EAAP;AACD,KAFQ;;AAIT;;AAEG;SACH,UAAU,KAAV,EAAwB;AACtB,WAAK,UAAL,CAAgB,QAAhB,CAAyB,KAAzB;AACD,KATQ;qBAAA;;AAAA,GAAT;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;SAAZ,YAAA;AACE,aAAO,KAAK,KAAL,CAAW,QAAlB;AACD,KAFW;;AAIZ;;AAEG;SACH,UAAa,QAAb,EAA8B;AAC5B,WAAK,KAAL,CAAW,QAAX,GAAsB,QAAtB;AACD,KATW;qBAAA;;AAAA,GAAZ;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;SAAX,YAAA;AACE,aAAO,KAAK,KAAL,CAAW,OAAlB;AACD,KAFU;;AAIX;;AAEG;SACH,UAAY,OAAZ,EAA2B;AACzB,WAAK,KAAL,CAAW,OAAX,GAAqB,OAArB;AACD,KATU;qBAAA;;AAAA,GAAX;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;SAAb,YAAA;AACE,aAAO,KAAK,KAAL,CAAW,SAAlB;AACD,KAFY;;AAIb;;AAEG;SACH,UAAc,SAAd,EAA+B;AAC7B,WAAK,KAAL,CAAW,SAAX,GAAuB,SAAvB;AACD,KATY;qBAAA;;AAAA,GAAb;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;SAAb,YAAA;AACE,aAAO,KAAK,KAAL,CAAW,SAAlB;AACD,KAFY;;AAIb;;AAEG;SACH,UAAc,SAAd,EAA+B;AAC7B;AACA,UAAI,SAAS,GAAG,CAAhB,EAAmB;AACjB,aAAK,KAAL,CAAW,eAAX,CAA2B,WAA3B;AACD,OAFD,MAEO;AACL,aAAK,KAAL,CAAW,SAAX,GAAuB,SAAvB;AACD;AACF,KAdY;qBAAA;;AAAA,GAAb;AAgBA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,KAAJ,EAAO;SAAP,YAAA;AACE,aAAO,KAAK,KAAL,CAAW,GAAlB;AACD,KAFM;;AAIP;;AAEG;SACH,UAAQ,GAAR,EAAmB;AACjB,WAAK,KAAL,CAAW,GAAX,GAAiB,GAAjB;AACD,KATM;qBAAA;;AAAA,GAAP;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,KAAJ,EAAO;SAAP,YAAA;AACE,aAAO,KAAK,KAAL,CAAW,GAAlB;AACD,KAFM;;AAIP;;AAEG;SACH,UAAQ,GAAR,EAAmB;AACjB,WAAK,KAAL,CAAW,GAAX,GAAiB,GAAjB;AACD,KATM;qBAAA;;AAAA,GAAP;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;SAAR,YAAA;AACE,aAAO,KAAK,KAAL,CAAW,IAAlB;AACD,KAFO;;AAIR;;AAEG;SACH,UAAS,IAAT,EAAqB;AACnB,WAAK,KAAL,CAAW,IAAX,GAAkB,IAAlB;AACD,KATO;qBAAA;;AAAA,GAAR;AAcA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,mBAAJ,EAAqB;AAHrB;;AAEG;SACH,UAAsB,OAAtB,EAAqC;AACnC,WAAK,UAAL,CAAgB,oBAAhB,CAAqC,OAArC;AACD,KAFoB;qBAAA;;AAAA,GAArB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,sBAAJ,EAAwB;AAHxB;;AAEG;SACH,UAAyB,KAAzB,EAAsC;AACpC,WAAK,UAAL,CAAgB,uBAAhB,CAAwC,KAAxC;AACD,KAFuB;qBAAA;;AAAA,GAAxB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,oBAAJ,EAAsB;AAHtB;;AAEG;SACH,UAAuB,OAAvB,EAAsC;AACpC,WAAK,UAAL,CAAgB,qBAAhB,CAAsC,OAAtC;AACD,KAFqB;qBAAA;;AAAA,GAAtB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,uBAAJ,EAAyB;AAHzB;;AAEG;SACH,UAA0B,KAA1B,EAAuC;AACrC,WAAK,UAAL,CAAgB,wBAAhB,CAAyC,KAAzC;AACD,KAFwB;qBAAA;;AAAA,GAAzB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,qBAAJ,EAAuB;AAHvB;;AAEG;SACH,UAAwB,OAAxB,EAAuC;AACrC,WAAK,UAAL,CAAgB,sBAAhB,CAAuC,OAAvC;AACD,KAFsB;qBAAA;;AAAA,GAAvB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,qBAAJ,EAAuB;AAJvB;;;AAGG;SACH,UAAwB,mBAAxB,EAAoD;AAClD,WAAK,UAAL,CAAgB,sBAAhB,CAAuC,mBAAvC;AACD,KAFsB;qBAAA;;AAAA,GAAvB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAHd;;AAEG;SACH,YAAA;AACE,aAAO,KAAK,MAAL,GAAc,KAAK,MAAL,CAAY,WAA1B,GAAwC,IAA/C;AACD,KAFa;;AAId;;AAEG;SACH,UAAe,UAAf,EAAsC;AACpC,UAAI,KAAK,MAAT,EAAiB;AACf,aAAK,MAAL,CAAY,WAAZ,GAA0B,UAA1B;AACD;AACF,KAXa;qBAAA;;AAAA,GAAd;AAgBA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAHd;;AAEG;SACH,YAAA;AACE,aAAO,KAAK,MAAL,GAAc,KAAK,MAAL,CAAY,WAA1B,GAAwC,IAA/C;AACD,KAFa;;AAId;;AAEG;SACH,UAAe,UAAf,EAAsC;AACpC,UAAI,KAAK,MAAT,EAAiB;AACf,aAAK,MAAL,CAAY,WAAZ,GAA0B,UAA1B;AACD;AACF,KAXa;qBAAA;;AAAA,GAAd;AAaA;;AAEG;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,SAAK,KAAL,CAAW,KAAX;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,SAAS,GAAG,KAAK,UAAL,CAAgB,WAAlC;AACA,SAAK,UAAL,CAAgB,YAAhB,CAA6B,SAA7B;AACD,GAHD;;AAKS,EAAA,YAAA,CAAA,SAAA,CAAA,oBAAA,GAAT,YAAA;AACE;AACA;AACA;AACA,QAAM,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACR,KAAK,qBAAL,EADQ,CAAA,EAER,KAAK,sBAAL,EAFQ,CAAA,EAGR,KAAK,sBAAL,EAHQ,CAAA,EAIR,KAAK,2BAAL,EAJQ,CAAA,EAKR,KAAK,wBAAL,EALQ,CAAb,CAJF,CAWE;;;AACA,WAAO,IAAI,sBAAJ,CAA2B,OAA3B,EAAoC,KAAK,gBAAL,EAApC,CAAP;AACD,GAbQ;;AAeD,EAAA,YAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACE;;;AACA,WAAO;AACL,MAAA,QAAQ,EAAE,UAAC,SAAD,EAAU;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,SAAV,CAAoB,GAApB,CAAA,SAAA,CAAA;AAAkC,OADtD;AAEL,MAAA,WAAW,EAAE,UAAC,SAAD,EAAU;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,SAAV,CAAoB,MAApB,CAAA,SAAA,CAAA;AAAqC,OAF5D;AAGL,MAAA,QAAQ,EAAE,UAAC,SAAD,EAAU;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,SAAV,CAAoB,QAApB,CAAA,SAAA,CAAA;AAAuC,OAH3D;AAIL,MAAA,mCAAmC,EAAE,UAAC,OAAD,EAAU,OAAV,EAAiB;AACpD,QAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,EAAqB,OAArB;AACD,OANI;AAOL,MAAA,qCAAqC,EAAE,UAAC,OAAD,EAAU,OAAV,EAAiB;AACtD,QAAA,KAAI,CAAC,QAAL,CAAc,OAAd,EAAuB,OAAvB;AACD,OATI;AAUL,MAAA,wCAAwC,EAAE,UAAC,OAAD,EAAQ;AAChD,YAAM,iBAAiB,GAAG,UAAC,aAAD,EAAgC;AACxD,iBAAO,aAAa,CACf,GADE,CACE,UAAC,QAAD,EAAS;AAAK,mBAAA,QAAQ,CAAR,aAAA;AAAsB,WADtC,EAEF,MAFE,CAEK,UAAC,aAAD,EAAc;AAAK,mBAAA,aAAA;AAAa,WAFrC,CAAP;AAGD,SAJD;;AAKA,YAAM,QAAQ,GAAG,IAAI,gBAAJ,CAAqB,UAAC,aAAD,EAAc;AAAK,iBAAA,OAAO,CAAC,iBAAiB,CAAzB,aAAyB,CAAlB,CAAP;AAAyC,SAAjF,CAAjB;AACA,YAAM,MAAM,GAAG;AAAC,UAAA,UAAU,EAAE;AAAb,SAAf;AACA,QAAA,QAAQ,CAAC,OAAT,CAAiB,KAAI,CAAC,KAAtB,EAA6B,MAA7B;AACA,eAAO,QAAP;AACD,OApBI;AAqBL,MAAA,0CAA0C,EAAE,UAAC,QAAD,EAAS;AACnD,QAAA,QAAQ,CAAC,UAAT;AACD;AAvBI,KAAP,CAFF,CA2BE;AACD,GA5BO;;AA8BA,EAAA,YAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACE;;;AACA,WAAO;AACL,MAAA,cAAc,EAAE,YAAA;AAAM,eAAA,KAAI,CAAJ,KAAA;AAAU,OAD3B;AAEL,MAAA,YAAY,EAAE,UAAC,IAAD,EAAO,KAAP,EAAY;AACxB,QAAA,KAAI,CAAC,KAAL,CAAW,YAAX,CAAwB,IAAxB,EAA8B,KAA9B;AACD,OAJI;AAKL,MAAA,eAAe,EAAE,UAAC,IAAD,EAAK;AACpB,QAAA,KAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,IAA3B;AACD,OAPI;AAQL,MAAA,SAAS,EAAE,YAAA;AAAM,eAAA,QAAQ,CAAC,aAAT,KAA2B,KAAI,CAA/B,KAAA;AAAqC,OARjD;AASL,MAAA,+BAA+B,EAAE,UAAC,OAAD,EAAU,OAAV,EAAiB;AAChD,QAAA,KAAI,CAAC,KAAL,CAAW,gBAAX,CAA4B,OAA5B,EAAqC,OAArC,EAA8C,YAAY,EAA1D;AACD,OAXI;AAYL,MAAA,iCAAiC,EAAE,UAAC,OAAD,EAAU,OAAV,EAAiB;AAClD,QAAA,KAAI,CAAC,KAAL,CAAW,mBAAX,CAA+B,OAA/B,EAAwC,OAAxC,EAAiD,YAAY,EAA7D;AACD;AAdI,KAAP,CAFF,CAkBE;AACD,GAnBO;;AAqBA,EAAA,YAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO;AACL,MAAA,UAAU,EAAE,UAAC,WAAD,EAAY;AACtB,QAAA,KAAI,CAAC,KAAL,IAAc,KAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,WAAjB,CAAd;AACD,OAHI;AAIL,MAAA,aAAa,EAAE,YAAA;AAAM,eAAA,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,KAAL,CAAW,QAAX,EAAb,GAAA,CAAA;AAAsC,OAJtD;AAKL,MAAA,QAAQ,EAAE,YAAA;AAAM,eAAA,OAAO,CAAC,KAAI,CAAZ,KAAO,CAAP;AAAmB,OAL9B;AAML,MAAA,UAAU,EAAE,UAAC,WAAD,EAAY;AACtB,QAAA,KAAI,CAAC,KAAL,IAAc,KAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,WAAjB,CAAd;AACD,OARI;AASL,MAAA,gBAAgB,EAAE,UAAC,UAAD,EAAW;AAC3B,QAAA,KAAI,CAAC,KAAL,IAAc,KAAI,CAAC,KAAL,CAAW,WAAX,CAAuB,UAAvB,CAAd;AACD;AAXI,KAAP;AAaD,GAdO;;AAgBA,EAAA,YAAA,CAAA,SAAA,CAAA,2BAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO;AACL,MAAA,kBAAkB,EAAE,YAAA;AAClB,YAAI,KAAI,CAAC,UAAT,EAAqB;AACnB,UAAA,KAAI,CAAC,UAAL,CAAgB,QAAhB;AACD;AACF,OALI;AAML,MAAA,oBAAoB,EAAE,YAAA;AACpB,YAAI,KAAI,CAAC,UAAT,EAAqB;AACnB,UAAA,KAAI,CAAC,UAAL,CAAgB,UAAhB;AACD;AACF,OAVI;AAWL,MAAA,4BAA4B,EAAE,UAAC,WAAD,EAAY;AACxC,YAAI,KAAI,CAAC,UAAT,EAAqB;AACnB,UAAA,KAAI,CAAC,UAAL,CAAgB,eAAhB,CAAgC,WAAhC;AACD;AACF;AAfI,KAAP;AAiBD,GAlBO;;AAoBA,EAAA,YAAA,CAAA,SAAA,CAAA,wBAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO;AACL,MAAA,YAAY,EAAE,YAAA;AACZ,QAAA,KAAI,CAAC,OAAL,IAAgB,KAAI,CAAC,OAAL,CAAa,UAAb,EAAhB;AACD,OAHI;AAIL,MAAA,UAAU,EAAE,YAAA;AAAM,eAAA,OAAO,CAAC,KAAI,CAAZ,OAAO,CAAP;AAAqB,OAJlC;AAKL,MAAA,YAAY,EAAE,UAAC,UAAD,EAAW;AACvB,QAAA,KAAI,CAAC,OAAL,IAAgB,KAAI,CAAC,OAAL,CAAa,KAAb,CAAmB,UAAnB,CAAhB;AACD;AAPI,KAAP;AASD,GAVO;AAYR;;AAEG;;;AACK,EAAA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,YAAA;AACE,WAAO;AACL,MAAA,gBAAgB,EAAE,KAAK,gBAAL,GACd,KAAK,gBAAL,CAAsB,sBADR,GAEd,SAHC;AAIL,MAAA,UAAU,EAAE,KAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,sBAAlC,GACkB,SALzB;AAML,MAAA,WAAW,EAAE,KAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,sBAApC,GACmB,SAP3B;AAQL,MAAA,YAAY,EAAE,KAAK,YAAL,GACV,KAAK,YAAL,CAAkB,sBADR,GAEV;AAVC,KAAP;AAYD,GAbO;;AAeA,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,aAArB,EAAoD;AAApD,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,UAAU,GAAG,KAAK,IAAL,CAAU,SAAV,CAAoB,QAApB,CAA6B,UAAU,CAAC,QAAxC,CAAnB;AACA,QAAM,UAAU,GAAG,KAAK,IAAL,CAAU,SAAV,CAAoB,QAApB,CAA6B,UAAU,CAAC,QAAxC,CAAnB;;AAEA,QAAI,UAAU,IAAI,UAAlB,EAA8B;AAC5B,aAAO,IAAP;AACD,KANiD,CAQlD;AACA;AACA;;;AACA,QAAM,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACR,SAAS,CAAC,aAAV,CAAwB,IAAxB,CADQ,CAAA,EACqB;AAChC,MAAA,eAAe,EAAE,YAAA;AAAM,eAAA,QAAQ,CAAC,OAAT,CAAiB,KAAI,CAAC,KAAtB,EAAA,SAAA,CAAA;AAAuC,OAD9B;AAEhC,MAAA,0BAA0B,EAAE,UAAC,OAAD,EAAU,OAAV,EAAiB;AAC3C,QAAA,KAAI,CAAC,KAAL,CAAW,gBAAX,CAA4B,OAA5B,EAAqC,OAArC,EAA8C,YAAY,EAA1D;AACD,OAJ+B;AAKhC,MAAA,4BAA4B,EAAE,UAAC,OAAD,EAAU,OAAV,EAAiB;AAC7C,QAAA,KAAI,CAAC,KAAL,CAAW,mBAAX,CAA+B,OAA/B,EAAwC,OAAxC,EAAiD,YAAY,EAA7D;AACD;AAP+B,KADrB,CAAb,CAXkD,CAqBlD;;;AACA,WAAO,aAAa,CAAC,KAAK,IAAN,EAAY,IAAI,mBAAJ,CAAwB,OAAxB,CAAZ,CAApB;AACD,GAvBO;;AAwBV,SAAA,YAAA;AAAC,CAheD,CAAkC,YAAlC,CAAA","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport * as ponyfill from '@material/dom/ponyfill';\nimport { MDCFloatingLabel } from '@material/floating-label/component';\nimport { MDCLineRipple } from '@material/line-ripple/component';\nimport { MDCNotchedOutline } from '@material/notched-outline/component';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { MDCTextFieldCharacterCounter } from './character-counter/component';\nimport { MDCTextFieldCharacterCounterFoundation } from './character-counter/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCTextFieldFoundation } from './foundation';\nimport { MDCTextFieldHelperText } from './helper-text/component';\nimport { MDCTextFieldHelperTextFoundation } from './helper-text/foundation';\nimport { MDCTextFieldIcon } from './icon/component';\nvar MDCTextField = /** @class */ (function (_super) {\n    __extends(MDCTextField, _super);\n    function MDCTextField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCTextField.attachTo = function (root) {\n        return new MDCTextField(root);\n    };\n    MDCTextField.prototype.initialize = function (rippleFactory, lineRippleFactory, helperTextFactory, characterCounterFactory, iconFactory, labelFactory, outlineFactory) {\n        if (rippleFactory === void 0) { rippleFactory = function (el, foundation) { return new MDCRipple(el, foundation); }; }\n        if (lineRippleFactory === void 0) { lineRippleFactory = function (el) { return new MDCLineRipple(el); }; }\n        if (helperTextFactory === void 0) { helperTextFactory = function (el) {\n            return new MDCTextFieldHelperText(el);\n        }; }\n        if (characterCounterFactory === void 0) { characterCounterFactory = function (el) {\n            return new MDCTextFieldCharacterCounter(el);\n        }; }\n        if (iconFactory === void 0) { iconFactory = function (el) { return new MDCTextFieldIcon(el); }; }\n        if (labelFactory === void 0) { labelFactory = function (el) { return new MDCFloatingLabel(el); }; }\n        if (outlineFactory === void 0) { outlineFactory = function (el) { return new MDCNotchedOutline(el); }; }\n        this.input =\n            this.root.querySelector(strings.INPUT_SELECTOR);\n        var labelElement = this.root.querySelector(strings.LABEL_SELECTOR);\n        this.label = labelElement ? labelFactory(labelElement) : null;\n        var lineRippleElement = this.root.querySelector(strings.LINE_RIPPLE_SELECTOR);\n        this.lineRipple =\n            lineRippleElement ? lineRippleFactory(lineRippleElement) : null;\n        var outlineElement = this.root.querySelector(strings.OUTLINE_SELECTOR);\n        this.outline = outlineElement ? outlineFactory(outlineElement) : null;\n        // Helper text\n        var helperTextStrings = MDCTextFieldHelperTextFoundation.strings;\n        var nextElementSibling = this.root.nextElementSibling;\n        var hasHelperLine = (nextElementSibling && nextElementSibling.classList.contains(cssClasses.HELPER_LINE));\n        var helperTextEl = hasHelperLine && nextElementSibling && nextElementSibling.querySelector(helperTextStrings.ROOT_SELECTOR);\n        this.helperText = helperTextEl ? helperTextFactory(helperTextEl) : null;\n        // Character counter\n        var characterCounterStrings = MDCTextFieldCharacterCounterFoundation.strings;\n        var characterCounterEl = this.root.querySelector(characterCounterStrings.ROOT_SELECTOR);\n        // If character counter is not found in root element search in sibling element.\n        if (!characterCounterEl && hasHelperLine && nextElementSibling) {\n            characterCounterEl = nextElementSibling.querySelector(characterCounterStrings.ROOT_SELECTOR);\n        }\n        this.characterCounter =\n            characterCounterEl ? characterCounterFactory(characterCounterEl) : null;\n        // Leading icon\n        var leadingIconEl = this.root.querySelector(strings.LEADING_ICON_SELECTOR);\n        this.leadingIcon = leadingIconEl ? iconFactory(leadingIconEl) : null;\n        // Trailing icon\n        var trailingIconEl = this.root.querySelector(strings.TRAILING_ICON_SELECTOR);\n        this.trailingIcon = trailingIconEl ? iconFactory(trailingIconEl) : null;\n        // Prefix and Suffix\n        this.prefix = this.root.querySelector(strings.PREFIX_SELECTOR);\n        this.suffix = this.root.querySelector(strings.SUFFIX_SELECTOR);\n        this.ripple = this.createRipple(rippleFactory);\n    };\n    MDCTextField.prototype.destroy = function () {\n        if (this.ripple) {\n            this.ripple.destroy();\n        }\n        if (this.lineRipple) {\n            this.lineRipple.destroy();\n        }\n        if (this.helperText) {\n            this.helperText.destroy();\n        }\n        if (this.characterCounter) {\n            this.characterCounter.destroy();\n        }\n        if (this.leadingIcon) {\n            this.leadingIcon.destroy();\n        }\n        if (this.trailingIcon) {\n            this.trailingIcon.destroy();\n        }\n        if (this.label) {\n            this.label.destroy();\n        }\n        if (this.outline) {\n            this.outline.destroy();\n        }\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * Initializes the Text Field's internal state based on the environment's\n     * state.\n     */\n    MDCTextField.prototype.initialSyncWithDOM = function () {\n        this.disabled = this.input.disabled;\n    };\n    Object.defineProperty(MDCTextField.prototype, \"value\", {\n        get: function () {\n            return this.foundation.getValue();\n        },\n        /**\n         * @param value The value to set on the input.\n         */\n        set: function (value) {\n            this.foundation.setValue(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"disabled\", {\n        get: function () {\n            return this.foundation.isDisabled();\n        },\n        /**\n         * @param disabled Sets the Text Field disabled or enabled.\n         */\n        set: function (disabled) {\n            this.foundation.setDisabled(disabled);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"valid\", {\n        get: function () {\n            return this.foundation.isValid();\n        },\n        /**\n         * @param valid Sets the Text Field valid or invalid.\n         */\n        set: function (valid) {\n            this.foundation.setValid(valid);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"required\", {\n        get: function () {\n            return this.input.required;\n        },\n        /**\n         * @param required Sets the Text Field to required.\n         */\n        set: function (required) {\n            this.input.required = required;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"pattern\", {\n        get: function () {\n            return this.input.pattern;\n        },\n        /**\n         * @param pattern Sets the input element's validation pattern.\n         */\n        set: function (pattern) {\n            this.input.pattern = pattern;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"minLength\", {\n        get: function () {\n            return this.input.minLength;\n        },\n        /**\n         * @param minLength Sets the input element's minLength.\n         */\n        set: function (minLength) {\n            this.input.minLength = minLength;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"maxLength\", {\n        get: function () {\n            return this.input.maxLength;\n        },\n        /**\n         * @param maxLength Sets the input element's maxLength.\n         */\n        set: function (maxLength) {\n            // Chrome throws exception if maxLength is set to a value less than zero\n            if (maxLength < 0) {\n                this.input.removeAttribute('maxLength');\n            }\n            else {\n                this.input.maxLength = maxLength;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"min\", {\n        get: function () {\n            return this.input.min;\n        },\n        /**\n         * @param min Sets the input element's min.\n         */\n        set: function (min) {\n            this.input.min = min;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"max\", {\n        get: function () {\n            return this.input.max;\n        },\n        /**\n         * @param max Sets the input element's max.\n         */\n        set: function (max) {\n            this.input.max = max;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"step\", {\n        get: function () {\n            return this.input.step;\n        },\n        /**\n         * @param step Sets the input element's step.\n         */\n        set: function (step) {\n            this.input.step = step;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"helperTextContent\", {\n        /**\n         * Sets the helper text element content.\n         */\n        set: function (content) {\n            this.foundation.setHelperTextContent(content);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"leadingIconAriaLabel\", {\n        /**\n         * Sets the aria label of the leading icon.\n         */\n        set: function (label) {\n            this.foundation.setLeadingIconAriaLabel(label);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"leadingIconContent\", {\n        /**\n         * Sets the text content of the leading icon.\n         */\n        set: function (content) {\n            this.foundation.setLeadingIconContent(content);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"trailingIconAriaLabel\", {\n        /**\n         * Sets the aria label of the trailing icon.\n         */\n        set: function (label) {\n            this.foundation.setTrailingIconAriaLabel(label);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"trailingIconContent\", {\n        /**\n         * Sets the text content of the trailing icon.\n         */\n        set: function (content) {\n            this.foundation.setTrailingIconContent(content);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"useNativeValidation\", {\n        /**\n         * Enables or disables the use of native validation. Use this for custom validation.\n         * @param useNativeValidation Set this to false to ignore native input validation.\n         */\n        set: function (useNativeValidation) {\n            this.foundation.setUseNativeValidation(useNativeValidation);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"prefixText\", {\n        /**\n         * Gets the text content of the prefix, or null if it does not exist.\n         */\n        get: function () {\n            return this.prefix ? this.prefix.textContent : null;\n        },\n        /**\n         * Sets the text content of the prefix, if it exists.\n         */\n        set: function (prefixText) {\n            if (this.prefix) {\n                this.prefix.textContent = prefixText;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextField.prototype, \"suffixText\", {\n        /**\n         * Gets the text content of the suffix, or null if it does not exist.\n         */\n        get: function () {\n            return this.suffix ? this.suffix.textContent : null;\n        },\n        /**\n         * Sets the text content of the suffix, if it exists.\n         */\n        set: function (suffixText) {\n            if (this.suffix) {\n                this.suffix.textContent = suffixText;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Focuses the input element.\n     */\n    MDCTextField.prototype.focus = function () {\n        this.input.focus();\n    };\n    /**\n     * Recomputes the outline SVG path for the outline element.\n     */\n    MDCTextField.prototype.layout = function () {\n        var openNotch = this.foundation.shouldFloat;\n        this.foundation.notchOutline(openNotch);\n    };\n    MDCTextField.prototype.getDefaultFoundation = function () {\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = __assign(__assign(__assign(__assign(__assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());\n        // tslint:enable:object-literal-sort-keys\n        return new MDCTextFieldFoundation(adapter, this.getFoundationMap());\n    };\n    MDCTextField.prototype.getRootAdapterMethods = function () {\n        var _this = this;\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        return {\n            addClass: function (className) { return _this.root.classList.add(className); },\n            removeClass: function (className) { return _this.root.classList.remove(className); },\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            registerTextFieldInteractionHandler: function (evtType, handler) {\n                _this.listen(evtType, handler);\n            },\n            deregisterTextFieldInteractionHandler: function (evtType, handler) {\n                _this.unlisten(evtType, handler);\n            },\n            registerValidationAttributeChangeHandler: function (handler) {\n                var getAttributesList = function (mutationsList) {\n                    return mutationsList\n                        .map(function (mutation) { return mutation.attributeName; })\n                        .filter(function (attributeName) { return attributeName; });\n                };\n                var observer = new MutationObserver(function (mutationsList) { return handler(getAttributesList(mutationsList)); });\n                var config = { attributes: true };\n                observer.observe(_this.input, config);\n                return observer;\n            },\n            deregisterValidationAttributeChangeHandler: function (observer) {\n                observer.disconnect();\n            },\n        };\n        // tslint:enable:object-literal-sort-keys\n    };\n    MDCTextField.prototype.getInputAdapterMethods = function () {\n        var _this = this;\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        return {\n            getNativeInput: function () { return _this.input; },\n            setInputAttr: function (attr, value) {\n                _this.input.setAttribute(attr, value);\n            },\n            removeInputAttr: function (attr) {\n                _this.input.removeAttribute(attr);\n            },\n            isFocused: function () { return document.activeElement === _this.input; },\n            registerInputInteractionHandler: function (evtType, handler) {\n                _this.input.addEventListener(evtType, handler, applyPassive());\n            },\n            deregisterInputInteractionHandler: function (evtType, handler) {\n                _this.input.removeEventListener(evtType, handler, applyPassive());\n            },\n        };\n        // tslint:enable:object-literal-sort-keys\n    };\n    MDCTextField.prototype.getLabelAdapterMethods = function () {\n        var _this = this;\n        return {\n            floatLabel: function (shouldFloat) {\n                _this.label && _this.label.float(shouldFloat);\n            },\n            getLabelWidth: function () { return _this.label ? _this.label.getWidth() : 0; },\n            hasLabel: function () { return Boolean(_this.label); },\n            shakeLabel: function (shouldShake) {\n                _this.label && _this.label.shake(shouldShake);\n            },\n            setLabelRequired: function (isRequired) {\n                _this.label && _this.label.setRequired(isRequired);\n            },\n        };\n    };\n    MDCTextField.prototype.getLineRippleAdapterMethods = function () {\n        var _this = this;\n        return {\n            activateLineRipple: function () {\n                if (_this.lineRipple) {\n                    _this.lineRipple.activate();\n                }\n            },\n            deactivateLineRipple: function () {\n                if (_this.lineRipple) {\n                    _this.lineRipple.deactivate();\n                }\n            },\n            setLineRippleTransformOrigin: function (normalizedX) {\n                if (_this.lineRipple) {\n                    _this.lineRipple.setRippleCenter(normalizedX);\n                }\n            },\n        };\n    };\n    MDCTextField.prototype.getOutlineAdapterMethods = function () {\n        var _this = this;\n        return {\n            closeOutline: function () {\n                _this.outline && _this.outline.closeNotch();\n            },\n            hasOutline: function () { return Boolean(_this.outline); },\n            notchOutline: function (labelWidth) {\n                _this.outline && _this.outline.notch(labelWidth);\n            },\n        };\n    };\n    /**\n     * @return A map of all subcomponents to subfoundations.\n     */\n    MDCTextField.prototype.getFoundationMap = function () {\n        return {\n            characterCounter: this.characterCounter ?\n                this.characterCounter.foundationForTextField :\n                undefined,\n            helperText: this.helperText ? this.helperText.foundationForTextField :\n                undefined,\n            leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForTextField :\n                undefined,\n            trailingIcon: this.trailingIcon ?\n                this.trailingIcon.foundationForTextField :\n                undefined,\n        };\n    };\n    MDCTextField.prototype.createRipple = function (rippleFactory) {\n        var _this = this;\n        var isTextArea = this.root.classList.contains(cssClasses.TEXTAREA);\n        var isOutlined = this.root.classList.contains(cssClasses.OUTLINED);\n        if (isTextArea || isOutlined) {\n            return null;\n        }\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { isSurfaceActive: function () { return ponyfill.matches(_this.input, ':active'); }, registerInteractionHandler: function (evtType, handler) {\n                _this.input.addEventListener(evtType, handler, applyPassive());\n            }, deregisterInteractionHandler: function (evtType, handler) {\n                _this.input.removeEventListener(evtType, handler, applyPassive());\n            } });\n        // tslint:enable:object-literal-sort-keys\n        return rippleFactory(this.root, new MDCRippleFoundation(adapter));\n    };\n    return MDCTextField;\n}(MDCComponent));\nexport { MDCTextField };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}