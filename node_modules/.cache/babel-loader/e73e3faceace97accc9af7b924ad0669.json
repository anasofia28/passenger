{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __values } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { ALWAYS_FLOAT_TYPES, cssClasses, numbers, strings, VALIDATION_ATTR_WHITELIST } from './constants';\nvar POINTERDOWN_EVENTS = ['mousedown', 'touchstart'];\nvar INTERACTION_EVENTS = ['click', 'keydown'];\n\nvar MDCTextFieldFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCTextFieldFoundation, _super);\n  /**\n   * @param adapter\n   * @param foundationMap Map from subcomponent names to their subfoundations.\n   */\n\n\n  function MDCTextFieldFoundation(adapter, foundationMap) {\n    if (foundationMap === void 0) {\n      foundationMap = {};\n    }\n\n    var _this = _super.call(this, __assign(__assign({}, MDCTextFieldFoundation.defaultAdapter), adapter)) || this;\n\n    _this.isFocused = false;\n    _this.receivedUserInput = false;\n    _this.valid = true;\n    _this.useNativeValidation = true;\n    _this.validateOnValueChange = true;\n    _this.helperText = foundationMap.helperText;\n    _this.characterCounter = foundationMap.characterCounter;\n    _this.leadingIcon = foundationMap.leadingIcon;\n    _this.trailingIcon = foundationMap.trailingIcon;\n\n    _this.inputFocusHandler = function () {\n      _this.activateFocus();\n    };\n\n    _this.inputBlurHandler = function () {\n      _this.deactivateFocus();\n    };\n\n    _this.inputInputHandler = function () {\n      _this.handleInput();\n    };\n\n    _this.setPointerXOffset = function (evt) {\n      _this.setTransformOrigin(evt);\n    };\n\n    _this.textFieldInteractionHandler = function () {\n      _this.handleTextFieldInteraction();\n    };\n\n    _this.validationAttributeChangeHandler = function (attributesList) {\n      _this.handleValidationAttributeChange(attributesList);\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(MDCTextFieldFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldAlwaysFloat\", {\n    get: function () {\n      var type = this.getNativeInput().type;\n      return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldFloat\", {\n    get: function () {\n      return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() || this.isBadInput();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldShake\", {\n    get: function () {\n      return !this.isFocused && !this.isValid() && !!this.getValue();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCTextFieldAdapter} for typing information on parameters and\n     * return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return true;\n        },\n        setInputAttr: function () {\n          return undefined;\n        },\n        removeInputAttr: function () {\n          return undefined;\n        },\n        registerTextFieldInteractionHandler: function () {\n          return undefined;\n        },\n        deregisterTextFieldInteractionHandler: function () {\n          return undefined;\n        },\n        registerInputInteractionHandler: function () {\n          return undefined;\n        },\n        deregisterInputInteractionHandler: function () {\n          return undefined;\n        },\n        registerValidationAttributeChangeHandler: function () {\n          return new MutationObserver(function () {\n            return undefined;\n          });\n        },\n        deregisterValidationAttributeChangeHandler: function () {\n          return undefined;\n        },\n        getNativeInput: function () {\n          return null;\n        },\n        isFocused: function () {\n          return false;\n        },\n        activateLineRipple: function () {\n          return undefined;\n        },\n        deactivateLineRipple: function () {\n          return undefined;\n        },\n        setLineRippleTransformOrigin: function () {\n          return undefined;\n        },\n        shakeLabel: function () {\n          return undefined;\n        },\n        floatLabel: function () {\n          return undefined;\n        },\n        setLabelRequired: function () {\n          return undefined;\n        },\n        hasLabel: function () {\n          return false;\n        },\n        getLabelWidth: function () {\n          return 0;\n        },\n        hasOutline: function () {\n          return false;\n        },\n        notchOutline: function () {\n          return undefined;\n        },\n        closeOutline: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCTextFieldFoundation.prototype.init = function () {\n    var e_1, _a, e_2, _b;\n\n    if (this.adapter.hasLabel() && this.getNativeInput().required) {\n      this.adapter.setLabelRequired(true);\n    }\n\n    if (this.adapter.isFocused()) {\n      this.inputFocusHandler();\n    } else if (this.adapter.hasLabel() && this.shouldFloat) {\n      this.notchOutline(true);\n      this.adapter.floatLabel(true);\n      this.styleFloating(true);\n    }\n\n    this.adapter.registerInputInteractionHandler('focus', this.inputFocusHandler);\n    this.adapter.registerInputInteractionHandler('blur', this.inputBlurHandler);\n    this.adapter.registerInputInteractionHandler('input', this.inputInputHandler);\n\n    try {\n      for (var POINTERDOWN_EVENTS_1 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next(); !POINTERDOWN_EVENTS_1_1.done; POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next()) {\n        var evtType = POINTERDOWN_EVENTS_1_1.value;\n        this.adapter.registerInputInteractionHandler(evtType, this.setPointerXOffset);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (POINTERDOWN_EVENTS_1_1 && !POINTERDOWN_EVENTS_1_1.done && (_a = POINTERDOWN_EVENTS_1.return)) _a.call(POINTERDOWN_EVENTS_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    try {\n      for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {\n        var evtType = INTERACTION_EVENTS_1_1.value;\n        this.adapter.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_b = INTERACTION_EVENTS_1.return)) _b.call(INTERACTION_EVENTS_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    this.validationObserver = this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler);\n    this.setcharacterCounter(this.getValue().length);\n  };\n\n  MDCTextFieldFoundation.prototype.destroy = function () {\n    var e_3, _a, e_4, _b;\n\n    this.adapter.deregisterInputInteractionHandler('focus', this.inputFocusHandler);\n    this.adapter.deregisterInputInteractionHandler('blur', this.inputBlurHandler);\n    this.adapter.deregisterInputInteractionHandler('input', this.inputInputHandler);\n\n    try {\n      for (var POINTERDOWN_EVENTS_2 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next(); !POINTERDOWN_EVENTS_2_1.done; POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next()) {\n        var evtType = POINTERDOWN_EVENTS_2_1.value;\n        this.adapter.deregisterInputInteractionHandler(evtType, this.setPointerXOffset);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (POINTERDOWN_EVENTS_2_1 && !POINTERDOWN_EVENTS_2_1.done && (_a = POINTERDOWN_EVENTS_2.return)) _a.call(POINTERDOWN_EVENTS_2);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    try {\n      for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {\n        var evtType = INTERACTION_EVENTS_2_1.value;\n        this.adapter.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_b = INTERACTION_EVENTS_2.return)) _b.call(INTERACTION_EVENTS_2);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);\n  };\n  /**\n   * Handles user interactions with the Text Field.\n   */\n\n\n  MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function () {\n    var nativeInput = this.adapter.getNativeInput();\n\n    if (nativeInput && nativeInput.disabled) {\n      return;\n    }\n\n    this.receivedUserInput = true;\n  };\n  /**\n   * Handles validation attribute changes\n   */\n\n\n  MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function (attributesList) {\n    var _this = this;\n\n    attributesList.some(function (attributeName) {\n      if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {\n        _this.styleValidity(true);\n\n        _this.adapter.setLabelRequired(_this.getNativeInput().required);\n\n        return true;\n      }\n\n      return false;\n    });\n\n    if (attributesList.indexOf('maxlength') > -1) {\n      this.setcharacterCounter(this.getValue().length);\n    }\n  };\n  /**\n   * Opens/closes the notched outline.\n   */\n\n\n  MDCTextFieldFoundation.prototype.notchOutline = function (openNotch) {\n    if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) {\n      return;\n    }\n\n    if (openNotch) {\n      var labelWidth = this.adapter.getLabelWidth() * numbers.LABEL_SCALE;\n      this.adapter.notchOutline(labelWidth);\n    } else {\n      this.adapter.closeOutline();\n    }\n  };\n  /**\n   * Activates the text field focus state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.activateFocus = function () {\n    this.isFocused = true;\n    this.styleFocused(this.isFocused);\n    this.adapter.activateLineRipple();\n\n    if (this.adapter.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter.floatLabel(this.shouldFloat);\n      this.styleFloating(this.shouldFloat);\n      this.adapter.shakeLabel(this.shouldShake);\n    }\n\n    if (this.helperText && (this.helperText.isPersistent() || !this.helperText.isValidation() || !this.valid)) {\n      this.helperText.showToScreenReader();\n    }\n  };\n  /**\n   * Sets the line ripple's transform origin, so that the line ripple activate\n   * animation will animate out from the user's click location.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setTransformOrigin = function (evt) {\n    if (this.isDisabled() || this.adapter.hasOutline()) {\n      return;\n    }\n\n    var touches = evt.touches;\n    var targetEvent = touches ? touches[0] : evt;\n    var targetClientRect = targetEvent.target.getBoundingClientRect();\n    var normalizedX = targetEvent.clientX - targetClientRect.left;\n    this.adapter.setLineRippleTransformOrigin(normalizedX);\n  };\n  /**\n   * Handles input change of text input and text area.\n   */\n\n\n  MDCTextFieldFoundation.prototype.handleInput = function () {\n    this.autoCompleteFocus();\n    this.setcharacterCounter(this.getValue().length);\n  };\n  /**\n   * Activates the Text Field's focus state in cases when the input value\n   * changes without user input (e.g. programmatically).\n   */\n\n\n  MDCTextFieldFoundation.prototype.autoCompleteFocus = function () {\n    if (!this.receivedUserInput) {\n      this.activateFocus();\n    }\n  };\n  /**\n   * Deactivates the Text Field's focus state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.deactivateFocus = function () {\n    this.isFocused = false;\n    this.adapter.deactivateLineRipple();\n    var isValid = this.isValid();\n    this.styleValidity(isValid);\n    this.styleFocused(this.isFocused);\n\n    if (this.adapter.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter.floatLabel(this.shouldFloat);\n      this.styleFloating(this.shouldFloat);\n      this.adapter.shakeLabel(this.shouldShake);\n    }\n\n    if (!this.shouldFloat) {\n      this.receivedUserInput = false;\n    }\n  };\n\n  MDCTextFieldFoundation.prototype.getValue = function () {\n    return this.getNativeInput().value;\n  };\n  /**\n   * @param value The value to set on the input Element.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setValue = function (value) {\n    // Prevent Safari from moving the caret to the end of the input when the\n    // value has not changed.\n    if (this.getValue() !== value) {\n      this.getNativeInput().value = value;\n    }\n\n    this.setcharacterCounter(value.length);\n\n    if (this.validateOnValueChange) {\n      var isValid = this.isValid();\n      this.styleValidity(isValid);\n    }\n\n    if (this.adapter.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter.floatLabel(this.shouldFloat);\n      this.styleFloating(this.shouldFloat);\n\n      if (this.validateOnValueChange) {\n        this.adapter.shakeLabel(this.shouldShake);\n      }\n    }\n  };\n  /**\n   * @return The custom validity state, if set; otherwise, the result of a\n   *     native validity check.\n   */\n\n\n  MDCTextFieldFoundation.prototype.isValid = function () {\n    return this.useNativeValidation ? this.isNativeInputValid() : this.valid;\n  };\n  /**\n   * @param isValid Sets the custom validity state of the Text Field.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setValid = function (isValid) {\n    this.valid = isValid;\n    this.styleValidity(isValid);\n    var shouldShake = !isValid && !this.isFocused && !!this.getValue();\n\n    if (this.adapter.hasLabel()) {\n      this.adapter.shakeLabel(shouldShake);\n    }\n  };\n  /**\n   * @param shouldValidate Whether or not validity should be updated on\n   *     value change.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setValidateOnValueChange = function (shouldValidate) {\n    this.validateOnValueChange = shouldValidate;\n  };\n  /**\n   * @return Whether or not validity should be updated on value change. `true`\n   *     by default.\n   */\n\n\n  MDCTextFieldFoundation.prototype.getValidateOnValueChange = function () {\n    return this.validateOnValueChange;\n  };\n  /**\n   * Enables or disables the use of native validation. Use this for custom\n   * validation.\n   * @param useNativeValidation Set this to false to ignore native input\n   *     validation.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setUseNativeValidation = function (useNativeValidation) {\n    this.useNativeValidation = useNativeValidation;\n  };\n\n  MDCTextFieldFoundation.prototype.isDisabled = function () {\n    return this.getNativeInput().disabled;\n  };\n  /**\n   * @param disabled Sets the text-field disabled or enabled.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setDisabled = function (disabled) {\n    this.getNativeInput().disabled = disabled;\n    this.styleDisabled(disabled);\n  };\n  /**\n   * @param content Sets the content of the helper text.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setHelperTextContent = function (content) {\n    if (this.helperText) {\n      this.helperText.setContent(content);\n    }\n  };\n  /**\n   * Sets the aria label of the leading icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function (label) {\n    if (this.leadingIcon) {\n      this.leadingIcon.setAriaLabel(label);\n    }\n  };\n  /**\n   * Sets the text content of the leading icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setLeadingIconContent = function (content) {\n    if (this.leadingIcon) {\n      this.leadingIcon.setContent(content);\n    }\n  };\n  /**\n   * Sets the aria label of the trailing icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function (label) {\n    if (this.trailingIcon) {\n      this.trailingIcon.setAriaLabel(label);\n    }\n  };\n  /**\n   * Sets the text content of the trailing icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setTrailingIconContent = function (content) {\n    if (this.trailingIcon) {\n      this.trailingIcon.setContent(content);\n    }\n  };\n  /**\n   * Sets character counter values that shows characters used and the total\n   * character limit.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setcharacterCounter = function (currentLength) {\n    if (!this.characterCounter) {\n      return;\n    }\n\n    var maxLength = this.getNativeInput().maxLength;\n\n    if (maxLength === -1) {\n      throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');\n    }\n\n    this.characterCounter.setCounterValue(currentLength, maxLength);\n  };\n  /**\n   * @return True if the Text Field input fails in converting the user-supplied\n   *     value.\n   */\n\n\n  MDCTextFieldFoundation.prototype.isBadInput = function () {\n    // The badInput property is not supported in IE 11 💩.\n    return this.getNativeInput().validity.badInput || false;\n  };\n  /**\n   * @return The result of native validity checking (ValidityState.valid).\n   */\n\n\n  MDCTextFieldFoundation.prototype.isNativeInputValid = function () {\n    return this.getNativeInput().validity.valid;\n  };\n  /**\n   * Styles the component based on the validity state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.styleValidity = function (isValid) {\n    var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;\n\n    if (isValid) {\n      this.adapter.removeClass(INVALID);\n    } else {\n      this.adapter.addClass(INVALID);\n    }\n\n    if (this.helperText) {\n      this.helperText.setValidity(isValid); // We dynamically set or unset aria-describedby for validation helper text\n      // only, based on whether the field is valid\n\n      var helperTextValidation = this.helperText.isValidation();\n\n      if (!helperTextValidation) {\n        return;\n      }\n\n      var helperTextVisible = this.helperText.isVisible();\n      var helperTextId = this.helperText.getId();\n\n      if (helperTextVisible && helperTextId) {\n        this.adapter.setInputAttr(strings.ARIA_DESCRIBEDBY, helperTextId);\n      } else {\n        this.adapter.removeInputAttr(strings.ARIA_DESCRIBEDBY);\n      }\n    }\n  };\n  /**\n   * Styles the component based on the focused state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.styleFocused = function (isFocused) {\n    var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;\n\n    if (isFocused) {\n      this.adapter.addClass(FOCUSED);\n    } else {\n      this.adapter.removeClass(FOCUSED);\n    }\n  };\n  /**\n   * Styles the component based on the disabled state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.styleDisabled = function (isDisabled) {\n    var _a = MDCTextFieldFoundation.cssClasses,\n        DISABLED = _a.DISABLED,\n        INVALID = _a.INVALID;\n\n    if (isDisabled) {\n      this.adapter.addClass(DISABLED);\n      this.adapter.removeClass(INVALID);\n    } else {\n      this.adapter.removeClass(DISABLED);\n    }\n\n    if (this.leadingIcon) {\n      this.leadingIcon.setDisabled(isDisabled);\n    }\n\n    if (this.trailingIcon) {\n      this.trailingIcon.setDisabled(isDisabled);\n    }\n  };\n  /**\n   * Styles the component based on the label floating state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.styleFloating = function (isFloating) {\n    var LABEL_FLOATING = MDCTextFieldFoundation.cssClasses.LABEL_FLOATING;\n\n    if (isFloating) {\n      this.adapter.addClass(LABEL_FLOATING);\n    } else {\n      this.adapter.removeClass(LABEL_FLOATING);\n    }\n  };\n  /**\n   * @return The native text input element from the host environment, or an\n   *     object with the same shape for unit tests.\n   */\n\n\n  MDCTextFieldFoundation.prototype.getNativeInput = function () {\n    // this.adapter may be undefined in foundation unit tests. This happens when\n    // testdouble is creating a mock object and invokes the\n    // shouldShake/shouldFloat getters (which in turn call getValue(), which\n    // calls this method) before init() has been called from the MDCTextField\n    // constructor. To work around that issue, we return a dummy object.\n    var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;\n    return nativeInput || {\n      disabled: false,\n      maxLength: -1,\n      required: false,\n      type: 'input',\n      validity: {\n        badInput: false,\n        valid: true\n      },\n      value: ''\n    };\n  };\n\n  return MDCTextFieldFoundation;\n}(MDCFoundation);\n\nexport { MDCTextFieldFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTextFieldFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __values } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { ALWAYS_FLOAT_TYPES, cssClasses, numbers, strings, VALIDATION_ATTR_WHITELIST } from './constants';\nvar POINTERDOWN_EVENTS = ['mousedown', 'touchstart'];\nvar INTERACTION_EVENTS = ['click', 'keydown'];\nvar MDCTextFieldFoundation = /** @class */ (function (_super) {\n    __extends(MDCTextFieldFoundation, _super);\n    /**\n     * @param adapter\n     * @param foundationMap Map from subcomponent names to their subfoundations.\n     */\n    function MDCTextFieldFoundation(adapter, foundationMap) {\n        if (foundationMap === void 0) { foundationMap = {}; }\n        var _this = _super.call(this, __assign(__assign({}, MDCTextFieldFoundation.defaultAdapter), adapter)) || this;\n        _this.isFocused = false;\n        _this.receivedUserInput = false;\n        _this.valid = true;\n        _this.useNativeValidation = true;\n        _this.validateOnValueChange = true;\n        _this.helperText = foundationMap.helperText;\n        _this.characterCounter = foundationMap.characterCounter;\n        _this.leadingIcon = foundationMap.leadingIcon;\n        _this.trailingIcon = foundationMap.trailingIcon;\n        _this.inputFocusHandler = function () {\n            _this.activateFocus();\n        };\n        _this.inputBlurHandler = function () {\n            _this.deactivateFocus();\n        };\n        _this.inputInputHandler = function () {\n            _this.handleInput();\n        };\n        _this.setPointerXOffset = function (evt) {\n            _this.setTransformOrigin(evt);\n        };\n        _this.textFieldInteractionHandler = function () {\n            _this.handleTextFieldInteraction();\n        };\n        _this.validationAttributeChangeHandler = function (attributesList) {\n            _this.handleValidationAttributeChange(attributesList);\n        };\n        return _this;\n    }\n    Object.defineProperty(MDCTextFieldFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextFieldFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextFieldFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldAlwaysFloat\", {\n        get: function () {\n            var type = this.getNativeInput().type;\n            return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldFloat\", {\n        get: function () {\n            return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() ||\n                this.isBadInput();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldShake\", {\n        get: function () {\n            return !this.isFocused && !this.isValid() && !!this.getValue();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextFieldFoundation, \"defaultAdapter\", {\n        /**\n         * See {@link MDCTextFieldAdapter} for typing information on parameters and\n         * return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                hasClass: function () { return true; },\n                setInputAttr: function () { return undefined; },\n                removeInputAttr: function () { return undefined; },\n                registerTextFieldInteractionHandler: function () { return undefined; },\n                deregisterTextFieldInteractionHandler: function () { return undefined; },\n                registerInputInteractionHandler: function () { return undefined; },\n                deregisterInputInteractionHandler: function () { return undefined; },\n                registerValidationAttributeChangeHandler: function () {\n                    return new MutationObserver(function () { return undefined; });\n                },\n                deregisterValidationAttributeChangeHandler: function () { return undefined; },\n                getNativeInput: function () { return null; },\n                isFocused: function () { return false; },\n                activateLineRipple: function () { return undefined; },\n                deactivateLineRipple: function () { return undefined; },\n                setLineRippleTransformOrigin: function () { return undefined; },\n                shakeLabel: function () { return undefined; },\n                floatLabel: function () { return undefined; },\n                setLabelRequired: function () { return undefined; },\n                hasLabel: function () { return false; },\n                getLabelWidth: function () { return 0; },\n                hasOutline: function () { return false; },\n                notchOutline: function () { return undefined; },\n                closeOutline: function () { return undefined; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCTextFieldFoundation.prototype.init = function () {\n        var e_1, _a, e_2, _b;\n        if (this.adapter.hasLabel() && this.getNativeInput().required) {\n            this.adapter.setLabelRequired(true);\n        }\n        if (this.adapter.isFocused()) {\n            this.inputFocusHandler();\n        }\n        else if (this.adapter.hasLabel() && this.shouldFloat) {\n            this.notchOutline(true);\n            this.adapter.floatLabel(true);\n            this.styleFloating(true);\n        }\n        this.adapter.registerInputInteractionHandler('focus', this.inputFocusHandler);\n        this.adapter.registerInputInteractionHandler('blur', this.inputBlurHandler);\n        this.adapter.registerInputInteractionHandler('input', this.inputInputHandler);\n        try {\n            for (var POINTERDOWN_EVENTS_1 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next(); !POINTERDOWN_EVENTS_1_1.done; POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next()) {\n                var evtType = POINTERDOWN_EVENTS_1_1.value;\n                this.adapter.registerInputInteractionHandler(evtType, this.setPointerXOffset);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (POINTERDOWN_EVENTS_1_1 && !POINTERDOWN_EVENTS_1_1.done && (_a = POINTERDOWN_EVENTS_1.return)) _a.call(POINTERDOWN_EVENTS_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        try {\n            for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {\n                var evtType = INTERACTION_EVENTS_1_1.value;\n                this.adapter.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_b = INTERACTION_EVENTS_1.return)) _b.call(INTERACTION_EVENTS_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        this.validationObserver =\n            this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler);\n        this.setcharacterCounter(this.getValue().length);\n    };\n    MDCTextFieldFoundation.prototype.destroy = function () {\n        var e_3, _a, e_4, _b;\n        this.adapter.deregisterInputInteractionHandler('focus', this.inputFocusHandler);\n        this.adapter.deregisterInputInteractionHandler('blur', this.inputBlurHandler);\n        this.adapter.deregisterInputInteractionHandler('input', this.inputInputHandler);\n        try {\n            for (var POINTERDOWN_EVENTS_2 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next(); !POINTERDOWN_EVENTS_2_1.done; POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next()) {\n                var evtType = POINTERDOWN_EVENTS_2_1.value;\n                this.adapter.deregisterInputInteractionHandler(evtType, this.setPointerXOffset);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (POINTERDOWN_EVENTS_2_1 && !POINTERDOWN_EVENTS_2_1.done && (_a = POINTERDOWN_EVENTS_2.return)) _a.call(POINTERDOWN_EVENTS_2);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        try {\n            for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {\n                var evtType = INTERACTION_EVENTS_2_1.value;\n                this.adapter.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_b = INTERACTION_EVENTS_2.return)) _b.call(INTERACTION_EVENTS_2);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);\n    };\n    /**\n     * Handles user interactions with the Text Field.\n     */\n    MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function () {\n        var nativeInput = this.adapter.getNativeInput();\n        if (nativeInput && nativeInput.disabled) {\n            return;\n        }\n        this.receivedUserInput = true;\n    };\n    /**\n     * Handles validation attribute changes\n     */\n    MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function (attributesList) {\n        var _this = this;\n        attributesList.some(function (attributeName) {\n            if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {\n                _this.styleValidity(true);\n                _this.adapter.setLabelRequired(_this.getNativeInput().required);\n                return true;\n            }\n            return false;\n        });\n        if (attributesList.indexOf('maxlength') > -1) {\n            this.setcharacterCounter(this.getValue().length);\n        }\n    };\n    /**\n     * Opens/closes the notched outline.\n     */\n    MDCTextFieldFoundation.prototype.notchOutline = function (openNotch) {\n        if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) {\n            return;\n        }\n        if (openNotch) {\n            var labelWidth = this.adapter.getLabelWidth() * numbers.LABEL_SCALE;\n            this.adapter.notchOutline(labelWidth);\n        }\n        else {\n            this.adapter.closeOutline();\n        }\n    };\n    /**\n     * Activates the text field focus state.\n     */\n    MDCTextFieldFoundation.prototype.activateFocus = function () {\n        this.isFocused = true;\n        this.styleFocused(this.isFocused);\n        this.adapter.activateLineRipple();\n        if (this.adapter.hasLabel()) {\n            this.notchOutline(this.shouldFloat);\n            this.adapter.floatLabel(this.shouldFloat);\n            this.styleFloating(this.shouldFloat);\n            this.adapter.shakeLabel(this.shouldShake);\n        }\n        if (this.helperText &&\n            (this.helperText.isPersistent() || !this.helperText.isValidation() ||\n                !this.valid)) {\n            this.helperText.showToScreenReader();\n        }\n    };\n    /**\n     * Sets the line ripple's transform origin, so that the line ripple activate\n     * animation will animate out from the user's click location.\n     */\n    MDCTextFieldFoundation.prototype.setTransformOrigin = function (evt) {\n        if (this.isDisabled() || this.adapter.hasOutline()) {\n            return;\n        }\n        var touches = evt.touches;\n        var targetEvent = touches ? touches[0] : evt;\n        var targetClientRect = targetEvent.target.getBoundingClientRect();\n        var normalizedX = targetEvent.clientX - targetClientRect.left;\n        this.adapter.setLineRippleTransformOrigin(normalizedX);\n    };\n    /**\n     * Handles input change of text input and text area.\n     */\n    MDCTextFieldFoundation.prototype.handleInput = function () {\n        this.autoCompleteFocus();\n        this.setcharacterCounter(this.getValue().length);\n    };\n    /**\n     * Activates the Text Field's focus state in cases when the input value\n     * changes without user input (e.g. programmatically).\n     */\n    MDCTextFieldFoundation.prototype.autoCompleteFocus = function () {\n        if (!this.receivedUserInput) {\n            this.activateFocus();\n        }\n    };\n    /**\n     * Deactivates the Text Field's focus state.\n     */\n    MDCTextFieldFoundation.prototype.deactivateFocus = function () {\n        this.isFocused = false;\n        this.adapter.deactivateLineRipple();\n        var isValid = this.isValid();\n        this.styleValidity(isValid);\n        this.styleFocused(this.isFocused);\n        if (this.adapter.hasLabel()) {\n            this.notchOutline(this.shouldFloat);\n            this.adapter.floatLabel(this.shouldFloat);\n            this.styleFloating(this.shouldFloat);\n            this.adapter.shakeLabel(this.shouldShake);\n        }\n        if (!this.shouldFloat) {\n            this.receivedUserInput = false;\n        }\n    };\n    MDCTextFieldFoundation.prototype.getValue = function () {\n        return this.getNativeInput().value;\n    };\n    /**\n     * @param value The value to set on the input Element.\n     */\n    MDCTextFieldFoundation.prototype.setValue = function (value) {\n        // Prevent Safari from moving the caret to the end of the input when the\n        // value has not changed.\n        if (this.getValue() !== value) {\n            this.getNativeInput().value = value;\n        }\n        this.setcharacterCounter(value.length);\n        if (this.validateOnValueChange) {\n            var isValid = this.isValid();\n            this.styleValidity(isValid);\n        }\n        if (this.adapter.hasLabel()) {\n            this.notchOutline(this.shouldFloat);\n            this.adapter.floatLabel(this.shouldFloat);\n            this.styleFloating(this.shouldFloat);\n            if (this.validateOnValueChange) {\n                this.adapter.shakeLabel(this.shouldShake);\n            }\n        }\n    };\n    /**\n     * @return The custom validity state, if set; otherwise, the result of a\n     *     native validity check.\n     */\n    MDCTextFieldFoundation.prototype.isValid = function () {\n        return this.useNativeValidation ? this.isNativeInputValid() : this.valid;\n    };\n    /**\n     * @param isValid Sets the custom validity state of the Text Field.\n     */\n    MDCTextFieldFoundation.prototype.setValid = function (isValid) {\n        this.valid = isValid;\n        this.styleValidity(isValid);\n        var shouldShake = !isValid && !this.isFocused && !!this.getValue();\n        if (this.adapter.hasLabel()) {\n            this.adapter.shakeLabel(shouldShake);\n        }\n    };\n    /**\n     * @param shouldValidate Whether or not validity should be updated on\n     *     value change.\n     */\n    MDCTextFieldFoundation.prototype.setValidateOnValueChange = function (shouldValidate) {\n        this.validateOnValueChange = shouldValidate;\n    };\n    /**\n     * @return Whether or not validity should be updated on value change. `true`\n     *     by default.\n     */\n    MDCTextFieldFoundation.prototype.getValidateOnValueChange = function () {\n        return this.validateOnValueChange;\n    };\n    /**\n     * Enables or disables the use of native validation. Use this for custom\n     * validation.\n     * @param useNativeValidation Set this to false to ignore native input\n     *     validation.\n     */\n    MDCTextFieldFoundation.prototype.setUseNativeValidation = function (useNativeValidation) {\n        this.useNativeValidation = useNativeValidation;\n    };\n    MDCTextFieldFoundation.prototype.isDisabled = function () {\n        return this.getNativeInput().disabled;\n    };\n    /**\n     * @param disabled Sets the text-field disabled or enabled.\n     */\n    MDCTextFieldFoundation.prototype.setDisabled = function (disabled) {\n        this.getNativeInput().disabled = disabled;\n        this.styleDisabled(disabled);\n    };\n    /**\n     * @param content Sets the content of the helper text.\n     */\n    MDCTextFieldFoundation.prototype.setHelperTextContent = function (content) {\n        if (this.helperText) {\n            this.helperText.setContent(content);\n        }\n    };\n    /**\n     * Sets the aria label of the leading icon.\n     */\n    MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function (label) {\n        if (this.leadingIcon) {\n            this.leadingIcon.setAriaLabel(label);\n        }\n    };\n    /**\n     * Sets the text content of the leading icon.\n     */\n    MDCTextFieldFoundation.prototype.setLeadingIconContent = function (content) {\n        if (this.leadingIcon) {\n            this.leadingIcon.setContent(content);\n        }\n    };\n    /**\n     * Sets the aria label of the trailing icon.\n     */\n    MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function (label) {\n        if (this.trailingIcon) {\n            this.trailingIcon.setAriaLabel(label);\n        }\n    };\n    /**\n     * Sets the text content of the trailing icon.\n     */\n    MDCTextFieldFoundation.prototype.setTrailingIconContent = function (content) {\n        if (this.trailingIcon) {\n            this.trailingIcon.setContent(content);\n        }\n    };\n    /**\n     * Sets character counter values that shows characters used and the total\n     * character limit.\n     */\n    MDCTextFieldFoundation.prototype.setcharacterCounter = function (currentLength) {\n        if (!this.characterCounter) {\n            return;\n        }\n        var maxLength = this.getNativeInput().maxLength;\n        if (maxLength === -1) {\n            throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');\n        }\n        this.characterCounter.setCounterValue(currentLength, maxLength);\n    };\n    /**\n     * @return True if the Text Field input fails in converting the user-supplied\n     *     value.\n     */\n    MDCTextFieldFoundation.prototype.isBadInput = function () {\n        // The badInput property is not supported in IE 11 💩.\n        return this.getNativeInput().validity.badInput || false;\n    };\n    /**\n     * @return The result of native validity checking (ValidityState.valid).\n     */\n    MDCTextFieldFoundation.prototype.isNativeInputValid = function () {\n        return this.getNativeInput().validity.valid;\n    };\n    /**\n     * Styles the component based on the validity state.\n     */\n    MDCTextFieldFoundation.prototype.styleValidity = function (isValid) {\n        var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;\n        if (isValid) {\n            this.adapter.removeClass(INVALID);\n        }\n        else {\n            this.adapter.addClass(INVALID);\n        }\n        if (this.helperText) {\n            this.helperText.setValidity(isValid);\n            // We dynamically set or unset aria-describedby for validation helper text\n            // only, based on whether the field is valid\n            var helperTextValidation = this.helperText.isValidation();\n            if (!helperTextValidation) {\n                return;\n            }\n            var helperTextVisible = this.helperText.isVisible();\n            var helperTextId = this.helperText.getId();\n            if (helperTextVisible && helperTextId) {\n                this.adapter.setInputAttr(strings.ARIA_DESCRIBEDBY, helperTextId);\n            }\n            else {\n                this.adapter.removeInputAttr(strings.ARIA_DESCRIBEDBY);\n            }\n        }\n    };\n    /**\n     * Styles the component based on the focused state.\n     */\n    MDCTextFieldFoundation.prototype.styleFocused = function (isFocused) {\n        var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;\n        if (isFocused) {\n            this.adapter.addClass(FOCUSED);\n        }\n        else {\n            this.adapter.removeClass(FOCUSED);\n        }\n    };\n    /**\n     * Styles the component based on the disabled state.\n     */\n    MDCTextFieldFoundation.prototype.styleDisabled = function (isDisabled) {\n        var _a = MDCTextFieldFoundation.cssClasses, DISABLED = _a.DISABLED, INVALID = _a.INVALID;\n        if (isDisabled) {\n            this.adapter.addClass(DISABLED);\n            this.adapter.removeClass(INVALID);\n        }\n        else {\n            this.adapter.removeClass(DISABLED);\n        }\n        if (this.leadingIcon) {\n            this.leadingIcon.setDisabled(isDisabled);\n        }\n        if (this.trailingIcon) {\n            this.trailingIcon.setDisabled(isDisabled);\n        }\n    };\n    /**\n     * Styles the component based on the label floating state.\n     */\n    MDCTextFieldFoundation.prototype.styleFloating = function (isFloating) {\n        var LABEL_FLOATING = MDCTextFieldFoundation.cssClasses.LABEL_FLOATING;\n        if (isFloating) {\n            this.adapter.addClass(LABEL_FLOATING);\n        }\n        else {\n            this.adapter.removeClass(LABEL_FLOATING);\n        }\n    };\n    /**\n     * @return The native text input element from the host environment, or an\n     *     object with the same shape for unit tests.\n     */\n    MDCTextFieldFoundation.prototype.getNativeInput = function () {\n        // this.adapter may be undefined in foundation unit tests. This happens when\n        // testdouble is creating a mock object and invokes the\n        // shouldShake/shouldFloat getters (which in turn call getValue(), which\n        // calls this method) before init() has been called from the MDCTextField\n        // constructor. To work around that issue, we return a dummy object.\n        var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;\n        return nativeInput || {\n            disabled: false,\n            maxLength: -1,\n            required: false,\n            type: 'input',\n            validity: {\n                badInput: false,\n                valid: true,\n            },\n            value: '',\n        };\n    };\n    return MDCTextFieldFoundation;\n}(MDCFoundation));\nexport { MDCTextFieldFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCTextFieldFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}